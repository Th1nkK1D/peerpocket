/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as GroupsRouteImport } from './routes/groups';
import { Route as GroupsGroupIdRouteImport } from './routes/groups.$groupId';
import { Route as GroupsGroupIdExpensesAddRouteImport } from './routes/groups.$groupId.expenses.add';
import { Route as GroupsGroupIdExpensesIndexRouteImport } from './routes/groups.$groupId.expenses.index';
import { Route as GroupsGroupIdIndexRouteImport } from './routes/groups.$groupId.index';
import { Route as GroupsGroupIdMembersRouteImport } from './routes/groups.$groupId.members';
import { Route as GroupsGroupIdSummaryRouteImport } from './routes/groups.$groupId.summary';
import { Route as GroupsCreateRouteImport } from './routes/groups.create';
import { Route as GroupsIndexRouteImport } from './routes/groups.index';
import { Route as GroupsJoinRouteImport } from './routes/groups.join';
import { Route as IndexRouteImport } from './routes/index';

const GroupsRoute = GroupsRouteImport.update({
	id: '/groups',
	path: '/groups',
	getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRouteImport,
} as any);
const GroupsIndexRoute = GroupsIndexRouteImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => GroupsRoute,
} as any);
const GroupsJoinRoute = GroupsJoinRouteImport.update({
	id: '/join',
	path: '/join',
	getParentRoute: () => GroupsRoute,
} as any);
const GroupsCreateRoute = GroupsCreateRouteImport.update({
	id: '/create',
	path: '/create',
	getParentRoute: () => GroupsRoute,
} as any);
const GroupsGroupIdRoute = GroupsGroupIdRouteImport.update({
	id: '/$groupId',
	path: '/$groupId',
	getParentRoute: () => GroupsRoute,
} as any);
const GroupsGroupIdIndexRoute = GroupsGroupIdIndexRouteImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => GroupsGroupIdRoute,
} as any);
const GroupsGroupIdSummaryRoute = GroupsGroupIdSummaryRouteImport.update({
	id: '/summary',
	path: '/summary',
	getParentRoute: () => GroupsGroupIdRoute,
} as any);
const GroupsGroupIdMembersRoute = GroupsGroupIdMembersRouteImport.update({
	id: '/members',
	path: '/members',
	getParentRoute: () => GroupsGroupIdRoute,
} as any);
const GroupsGroupIdExpensesIndexRoute =
	GroupsGroupIdExpensesIndexRouteImport.update({
		id: '/expenses/',
		path: '/expenses/',
		getParentRoute: () => GroupsGroupIdRoute,
	} as any);
const GroupsGroupIdExpensesAddRoute =
	GroupsGroupIdExpensesAddRouteImport.update({
		id: '/expenses/add',
		path: '/expenses/add',
		getParentRoute: () => GroupsGroupIdRoute,
	} as any);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'/groups': typeof GroupsRouteWithChildren;
	'/groups/$groupId': typeof GroupsGroupIdRouteWithChildren;
	'/groups/create': typeof GroupsCreateRoute;
	'/groups/join': typeof GroupsJoinRoute;
	'/groups/': typeof GroupsIndexRoute;
	'/groups/$groupId/members': typeof GroupsGroupIdMembersRoute;
	'/groups/$groupId/summary': typeof GroupsGroupIdSummaryRoute;
	'/groups/$groupId/': typeof GroupsGroupIdIndexRoute;
	'/groups/$groupId/expenses/add': typeof GroupsGroupIdExpensesAddRoute;
	'/groups/$groupId/expenses': typeof GroupsGroupIdExpensesIndexRoute;
}
export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'/groups/create': typeof GroupsCreateRoute;
	'/groups/join': typeof GroupsJoinRoute;
	'/groups': typeof GroupsIndexRoute;
	'/groups/$groupId/members': typeof GroupsGroupIdMembersRoute;
	'/groups/$groupId/summary': typeof GroupsGroupIdSummaryRoute;
	'/groups/$groupId': typeof GroupsGroupIdIndexRoute;
	'/groups/$groupId/expenses/add': typeof GroupsGroupIdExpensesAddRoute;
	'/groups/$groupId/expenses': typeof GroupsGroupIdExpensesIndexRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	'/': typeof IndexRoute;
	'/groups': typeof GroupsRouteWithChildren;
	'/groups/$groupId': typeof GroupsGroupIdRouteWithChildren;
	'/groups/create': typeof GroupsCreateRoute;
	'/groups/join': typeof GroupsJoinRoute;
	'/groups/': typeof GroupsIndexRoute;
	'/groups/$groupId/members': typeof GroupsGroupIdMembersRoute;
	'/groups/$groupId/summary': typeof GroupsGroupIdSummaryRoute;
	'/groups/$groupId/': typeof GroupsGroupIdIndexRoute;
	'/groups/$groupId/expenses/add': typeof GroupsGroupIdExpensesAddRoute;
	'/groups/$groupId/expenses/': typeof GroupsGroupIdExpensesIndexRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| '/'
		| '/groups'
		| '/groups/$groupId'
		| '/groups/create'
		| '/groups/join'
		| '/groups/'
		| '/groups/$groupId/members'
		| '/groups/$groupId/summary'
		| '/groups/$groupId/'
		| '/groups/$groupId/expenses/add'
		| '/groups/$groupId/expenses';
	fileRoutesByTo: FileRoutesByTo;
	to:
		| '/'
		| '/groups/create'
		| '/groups/join'
		| '/groups'
		| '/groups/$groupId/members'
		| '/groups/$groupId/summary'
		| '/groups/$groupId'
		| '/groups/$groupId/expenses/add'
		| '/groups/$groupId/expenses';
	id:
		| '__root__'
		| '/'
		| '/groups'
		| '/groups/$groupId'
		| '/groups/create'
		| '/groups/join'
		| '/groups/'
		| '/groups/$groupId/members'
		| '/groups/$groupId/summary'
		| '/groups/$groupId/'
		| '/groups/$groupId/expenses/add'
		| '/groups/$groupId/expenses/';
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	GroupsRoute: typeof GroupsRouteWithChildren;
}

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/groups': {
			id: '/groups';
			path: '/groups';
			fullPath: '/groups';
			preLoaderRoute: typeof GroupsRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		'/groups/': {
			id: '/groups/';
			path: '/';
			fullPath: '/groups/';
			preLoaderRoute: typeof GroupsIndexRouteImport;
			parentRoute: typeof GroupsRoute;
		};
		'/groups/join': {
			id: '/groups/join';
			path: '/join';
			fullPath: '/groups/join';
			preLoaderRoute: typeof GroupsJoinRouteImport;
			parentRoute: typeof GroupsRoute;
		};
		'/groups/create': {
			id: '/groups/create';
			path: '/create';
			fullPath: '/groups/create';
			preLoaderRoute: typeof GroupsCreateRouteImport;
			parentRoute: typeof GroupsRoute;
		};
		'/groups/$groupId': {
			id: '/groups/$groupId';
			path: '/$groupId';
			fullPath: '/groups/$groupId';
			preLoaderRoute: typeof GroupsGroupIdRouteImport;
			parentRoute: typeof GroupsRoute;
		};
		'/groups/$groupId/': {
			id: '/groups/$groupId/';
			path: '/';
			fullPath: '/groups/$groupId/';
			preLoaderRoute: typeof GroupsGroupIdIndexRouteImport;
			parentRoute: typeof GroupsGroupIdRoute;
		};
		'/groups/$groupId/summary': {
			id: '/groups/$groupId/summary';
			path: '/summary';
			fullPath: '/groups/$groupId/summary';
			preLoaderRoute: typeof GroupsGroupIdSummaryRouteImport;
			parentRoute: typeof GroupsGroupIdRoute;
		};
		'/groups/$groupId/members': {
			id: '/groups/$groupId/members';
			path: '/members';
			fullPath: '/groups/$groupId/members';
			preLoaderRoute: typeof GroupsGroupIdMembersRouteImport;
			parentRoute: typeof GroupsGroupIdRoute;
		};
		'/groups/$groupId/expenses/': {
			id: '/groups/$groupId/expenses/';
			path: '/expenses';
			fullPath: '/groups/$groupId/expenses';
			preLoaderRoute: typeof GroupsGroupIdExpensesIndexRouteImport;
			parentRoute: typeof GroupsGroupIdRoute;
		};
		'/groups/$groupId/expenses/add': {
			id: '/groups/$groupId/expenses/add';
			path: '/expenses/add';
			fullPath: '/groups/$groupId/expenses/add';
			preLoaderRoute: typeof GroupsGroupIdExpensesAddRouteImport;
			parentRoute: typeof GroupsGroupIdRoute;
		};
	}
}

interface GroupsGroupIdRouteChildren {
	GroupsGroupIdMembersRoute: typeof GroupsGroupIdMembersRoute;
	GroupsGroupIdSummaryRoute: typeof GroupsGroupIdSummaryRoute;
	GroupsGroupIdIndexRoute: typeof GroupsGroupIdIndexRoute;
	GroupsGroupIdExpensesAddRoute: typeof GroupsGroupIdExpensesAddRoute;
	GroupsGroupIdExpensesIndexRoute: typeof GroupsGroupIdExpensesIndexRoute;
}

const GroupsGroupIdRouteChildren: GroupsGroupIdRouteChildren = {
	GroupsGroupIdMembersRoute: GroupsGroupIdMembersRoute,
	GroupsGroupIdSummaryRoute: GroupsGroupIdSummaryRoute,
	GroupsGroupIdIndexRoute: GroupsGroupIdIndexRoute,
	GroupsGroupIdExpensesAddRoute: GroupsGroupIdExpensesAddRoute,
	GroupsGroupIdExpensesIndexRoute: GroupsGroupIdExpensesIndexRoute,
};

const GroupsGroupIdRouteWithChildren = GroupsGroupIdRoute._addFileChildren(
	GroupsGroupIdRouteChildren,
);

interface GroupsRouteChildren {
	GroupsGroupIdRoute: typeof GroupsGroupIdRouteWithChildren;
	GroupsCreateRoute: typeof GroupsCreateRoute;
	GroupsJoinRoute: typeof GroupsJoinRoute;
	GroupsIndexRoute: typeof GroupsIndexRoute;
}

const GroupsRouteChildren: GroupsRouteChildren = {
	GroupsGroupIdRoute: GroupsGroupIdRouteWithChildren,
	GroupsCreateRoute: GroupsCreateRoute,
	GroupsJoinRoute: GroupsJoinRoute,
	GroupsIndexRoute: GroupsIndexRoute,
};

const GroupsRouteWithChildren =
	GroupsRoute._addFileChildren(GroupsRouteChildren);

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	GroupsRoute: GroupsRouteWithChildren,
};
export const routeTree = rootRouteImport
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();
